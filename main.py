import openai
import os
import json
import asyncio
import aiofiles
from read_pptx import ReadPptx
from dotenv import load_dotenv
import argparse


load_dotenv()
openai.api_key = os.getenv('OPENAI_API_KEY')
PROMPT = os.getenv('OPENAI_PROMPT')
PATH = "./test.pptx"


async def get_explanation_from_gpt(text):
    """
    Fetches an explanation for the given text from GPT-3.5.

    Args:
        text (str): The text extracted from a PowerPoint slide.
    Returns:
        str: The explanation generated by GPT-3.5 for the given text, or an error message if the request fails.
    """
    prompt = f"{PROMPT} {text}"
    
    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}], timeout=10
        )
        
        explanation = response.choices[0].message.content
        return explanation
    
    except openai.APIError as e:
        #Handle API error here, e.g. retry or log
        return(f"OpenAI API returned an API Error: {e}")
    except openai.APIConnectionError as e:
        #Handle connection error here
        return(f"Failed to connect to OpenAI API: {e}")
    except Exception as e:
        return f"Error: {str(e)}"
    
    
# Function that will extract explanations and return them by slide number
def extract_explanations(slides_explanation, res):
    """
    Extracts explanations and associates them with slide numbers.

    Args:
        slides_explanation (list): The list to store slide explanations.
        res (list): The list of explanations returned by GPT-3.5.
    """
    for slide_number, api_slide_explanation in enumerate(res, start=1):
        slides_explanation.append({"slide_number": slide_number, "explanation": api_slide_explanation})
        

async def save_explanations_to_json(explanations, output_path):
    """
    Saves the explanations to a JSON file.

    Args:
        explanations (list): The list of explanations to be saved.
        output_path (str): The path to the output JSON file.
    """
    async with aiofiles.open(output_path, mode='w') as f:
        await f.write(json.dumps(explanations, indent=4))


async def main(pptx_path):
    """
    Main function to extract text from a PowerPoint presentation, get explanations for each slide, and save them to a JSON file.

    Args:
        pptx_path (str): The path to the PowerPoint presentation file.
    """
    # Extract text from the presentation
    pptx = ReadPptx(pptx_path)
    slides_text = pptx.extract_text_from_pptx_file()
    
    # Get explanations for all slides
    ls = []
    tasks = [asyncio.create_task(get_explanation_from_gpt(slide_text)) for slide_text in slides_text]
    explanations = await asyncio.gather(*tasks)
    for result in explanations:
        if result:
            print(result)
    extract_explanations(ls, explanations)
    
    # Save explanations to JSON
    output_path = pptx_path.replace('.pptx', '.json')
    await save_explanations_to_json(ls, output_path)
    print(f"Explanations saved to {output_path}")

if __name__ == '__main__':
    asyncio.run(main(PATH))
    
    # parser = argparse.ArgumentParser(description="Explain PowerPoint presentations using Chat GPT")
    # parser.add_argument("pptx_path", help="Path to the PowerPoint presentation file.")
    # args = parser.parse_args()
    # asyncio.run(main(args.pptx_path))